import streamlit as st
import openai
import random
import datetime
import os
import json
from docx import Document

# Configuration de la cl√© OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# Chargement des profils d‚Äôerreurs
with open("profils_fautes_corriges.json", "r", encoding="utf-8") as f:
    profils_fautes = json.load(f)

# Fonction pour construire un prompt adapt√©

def construire_prompt(question, genre):
    intro = (
        "Tu incarnes un(e) √©tudiant(e) en Master 2 Finance de March√© ‚Äì sp√©cialit√© Trading. "
        "Tu r√©diges une r√©ponse √† un devoir surveill√©, en adoptant un ton personnel et critique, "
        "√† la premi√®re personne du singulier, mais avec la rigueur attendue √† ce niveau."
    )

    ton = (
        "Exprime-toi comme une √©tudiante en fin de Master, avec un style fluide, naturel et structur√©. "
        "Utilise des transitions coh√©rentes, √©vite les r√©p√©titions comme 'En tant qu‚Äô√©tudiante‚Ä¶'. "
        "Sois pr√©cise, nuanc√©e, et propose une r√©flexion argument√©e, comme dans un devoir √©crit authentique."
        if genre == "f" else
        "Exprime-toi comme un √©tudiant en fin de Master, avec un style fluide, naturel et structur√©. "
        "Utilise des transitions coh√©rentes, √©vite les r√©p√©titions comme 'En tant qu‚Äô√©tudiant‚Ä¶'. "
        "Sois pr√©cis, nuanc√©, et propose une r√©flexion argument√©e, comme dans un devoir √©crit authentique."
    )

    consignes = (
        "Structure ta r√©ponse avec : une courte introduction contextuelle, un d√©veloppement logique, "
        "et une conclusion ou ouverture. N‚Äôutilise pas de listes √† puces, mais d√©veloppe chaque id√©e dans un paragraphe complet."
    )

    return f"{intro}\n{ton}\n{consignes}\n\nQuestion : {question}"

# Fonction pour introduire des erreurs selon un profil

def introduire_erreurs_subtiles(texte, profil):
    base = profil["base_rate"]
    mots_risque = profil["mots_a_risque"]
    repetition = profil["repetition_faute"]

    if random.random() < base["accent_oublie"]:
        texte = texte.replace("√©", "e", 1).replace("√†", "a", 1)

    if random.random() < base["homophone"]:
        homophones = [("et", "est"), ("a", "√†"), ("ces", "ses"), ("on", "ont"), ("c‚Äôest", "s‚Äôest")]
        h = random.choice(homophones)
        texte = texte.replace(h[0], h[1], 1)

    if random.random() < base["touche_adj"]:
        texte = texte.replace("u", "i", 1)

    if random.random() < base["liaison_oubliee"]:
        texte = texte.replace("n‚Äôest", "ne est", 1)

    if random.random() < base["fautes_d_accord"]:
        texte = texte.replace("les entreprises sont", "les entreprise est", 1)

    if random.random() < repetition:
        mot = random.choice(mots_risque)
        texte = texte.replace(mot, mot.upper(), 1)

    return texte

# Chargement du fichier devoirs_bloc2.json avec contexte, t√¢ches et questions
with open("devoirs_bloc2.json", "r", encoding="utf-8") as f:
    devoirs_bloc2 = json.load(f)

# G√©n√©ration des r√©ponses par devoir

def generer_reponses_par_bloc(partie_info, genre, profil):
    contexte = partie_info["contexte"]
    taches = partie_info["taches"]
    questions = partie_info["questions"]
    responses = []

    for question in questions:
        prompt = (
            f"Contexte :\n{contexte.strip()}\n\n"
            f"T√¢che √† accomplir :\n{taches.strip()}\n\n"
            f"Question :\n{question.strip()}\n\n"
            f"{construire_prompt(question, genre)}"
        )

        response = openai.ChatCompletion.create(
            model="gpt-4",
            temperature=random.uniform(0.7, 0.9),
            messages=[
                {"role": "system", "content": "Tu es professeur en finance de march√©, expert en strat√©gie macro-√©conomique et √©valuation financi√®re."},
                {"role": "user", "content": prompt}
            ]
        )

        texte = response.choices[0].message.content.strip()
        texte_avec_fautes = introduire_erreurs_subtiles(texte, profil)
        responses.append(texte_avec_fautes)

    return responses

# Interface utilisateur Streamlit

st.title("üß† G√©n√©rateur de Devoirs - Bloc 2")
st.markdown("Remplis le formulaire ci-dessous pour g√©n√©rer un devoir complet automatiquement.")

nom = st.text_input("Nom de l'√©l√®ve")
prenom = st.text_input("Pr√©nom de l'√©l√®ve")
date_naissance = st.date_input("Date de naissance")
genre = st.radio("Genre", ["m", "f"])

noms_profils = [profil["nom"] for profil in profils_fautes.values()]
profil_nom_selectionne = st.selectbox("Choisis un profil d'√©l√®ve :", noms_profils)
profil_selectionne = next(p for p in profils_fautes.values() if p["nom"] == profil_nom_selectionne)

if st.button("üìÑ G√©n√©rer le devoir"):
    date_realisation = datetime.datetime.today().strftime("%d/%m/%Y")
    repertoire_eleve = os.path.join("Devoirs_Eleves_Bloc2", f"{prenom}_{nom}")
    os.makedirs(repertoire_eleve, exist_ok=True)

    doc = Document()
    doc.add_heading("Devoir Surveill√© Complet - Bloc 2 - Master Finance de March√©", level=1)
    doc.add_paragraph(f"üìå Nom : {nom}")
    doc.add_paragraph(f"üìå Pr√©nom : {prenom}")
    doc.add_paragraph(f"üìå Date de naissance : {date_naissance.strftime('%d/%m/%Y')}")
    doc.add_paragraph(f"üìå Date de r√©alisation : {date_realisation}")

    for partie, contenu in devoirs_bloc2.items():
        doc.add_page_break()
        doc.add_heading(f"üìò {partie}", level=1)
        reponses = generer_reponses_par_bloc(contenu, genre, profil_selectionne)
        for idx, reponse in enumerate(reponses, 1):
            doc.add_heading(f"üìù Question {idx}", level=2)
            doc.add_paragraph(reponse)

    filename = os.path.join(repertoire_eleve, f"Devoir_Surveill√©_Complet_{prenom}_{nom}.docx")
    doc.save(filename)

    st.success(f"‚úÖ Devoir g√©n√©r√© et enregistr√© : {filename}")
    with open(filename, "rb") as file:
        st.download_button("‚¨áÔ∏è T√©l√©charger le devoir", file, file_name=os.path.basename(filename))
