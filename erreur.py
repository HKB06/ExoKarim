import openai
import random
import json
import time
import os
from dotenv import load_dotenv

# üîê Chargement de la cl√© API depuis le fichier .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

if not openai.api_key:
    raise ValueError("‚ö†Ô∏è Cl√© API OpenAI non d√©finie ! Ajoute-la dans un fichier .env.")

# üîπ Liste d'erreurs typiques pour simulation humaine
ERREURS_SUBTILES = [
    ("inflation", "inflattion"),
    ("croissance √©conomique", "croissanse economique"),
    ("r√©gulation", "regulation"),
    ("volatilit√©", "volatilit√©e"),
    ("analyse financi√®re", "analize financiere"),
    ("investissement", "investicement"),
    ("liquidit√©", "liquid√©"),
    ("politique mon√©taire", "politique monnaitaire"),
    ("√©valuation", "√©valutation"),
    ("risque syst√©mique", "riske syst√©mique"),
]

ERREURS_GRAMMATICALES = [
    ("Les entreprises investissent", "Les entreprise investisse"),
    ("Il y a un impact", "Il a un impact"),
    ("Les march√©s financiers sont", "Les march√© financier est"),
    ("Les r√©glementations √©voluent", "Les r√©gulations √©volue"),
]

ERREURS_TYPOS = [
    ("l'√©conomie", "l economis"),
    ("financier", "finacnier"),
    ("strat√©gique", "stra√©tgique"),
    ("analyse", "anlyse"),
]

FORMULATIONS_MALADROITES = [
    ("En conclusion,", "Donc, ben, en fait,"),
    ("Il est essentiel de noter que", "Bon, faut quand m√™me dire que"),
    ("Les r√©sultats montrent que", "Si on regarde bien, on voit que"),
    ("D‚Äôun point de vue √©conomique,", "En vrai, sur l'√©conomie,"),
]

# üîπ Fonction pour introduire des erreurs
def introduire_erreurs(texte):
    if random.random() < 0.4:  # 40% de chance d'introduire une faute d'orthographe
        erreur = random.choice(ERREURS_SUBTILES)
        texte = texte.replace(erreur[0], erreur[1], 1)

    if random.random() < 0.3:  # 30% de chance d'introduire une faute grammaticale
        erreur = random.choice(ERREURS_GRAMMATICALES)
        texte = texte.replace(erreur[0], erreur[1], 1)

    if random.random() < 0.3:  # 30% de chance d'introduire une faute typographique
        erreur = random.choice(ERREURS_TYPOS)
        texte = texte.replace(erreur[0], erreur[1], 1)

    if random.random() < 0.3:  # 30% de chance d'ajouter une formulation maladroite
        erreur = random.choice(FORMULATIONS_MALADROITES)
        texte = texte.replace(erreur[0], erreur[1], 1)

    return texte

# üîπ G√©n√©rer un jeu de donn√©es massif avec OpenAI
def generer_jeu_de_donnees(n_samples=1000, output_file="jeu_de_donnees_massif.json"):
    dataset = []
    
    for i in range(n_samples):
        print(f"‚è≥ G√©n√©ration de l'exemple {i+1}/{n_samples}...")

        prompt = "Explique bri√®vement un concept √©conomique simple (inflation, march√© boursier, taux d'int√©r√™t, volatilit√©, etc.)."
        
        try:
            response = openai.ChatCompletion.create(

                model="gpt-4",
                temperature=random.uniform(0.7, 1.0),
                messages=[
                    {"role": "system", "content": "Tu es un professeur d'√©conomie qui explique des concepts de mani√®re accessible."},
                    {"role": "user", "content": prompt}
                ]
            )
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur lors de l'appel API : {e}")
            time.sleep(5)  # Pause en cas d'erreur
            continue

        texte_original = response.choices[0].message.content
        texte_avec_erreurs = introduire_erreurs(texte_original)

        dataset.append({
            "original": texte_original,
            "avec_erreurs": texte_avec_erreurs
        })

        # Pause pour √©viter les restrictions API
        time.sleep(1)

    # üîπ Sauvegarde en JSON
    with open(output_file, "w", encoding="utf-8") as f:
        json.dump(dataset, f, indent=4, ensure_ascii=False)
    
    print(f"‚úÖ Fichier '{output_file}' g√©n√©r√© avec succ√®s avec {len(dataset)} entr√©es.")

# üîπ Ex√©cution
generer_jeu_de_donnees(n_samples=1000)
