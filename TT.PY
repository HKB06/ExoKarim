import streamlit as st
import openai
import random
import datetime
import os
import json
from docx import Document
from dotenv import load_dotenv

# üîê Chargement de la cl√© OpenAI depuis un fichier .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# üìÅ Chemin du fichier DOCX du sujet complet
chemin_sujet = "C:/Users/ps3ka/openai/BLOC1 DS.docx"

# üìÇ Chargement des profils de fautes
with open("profils_fautes_corriges.json", "r", encoding="utf-8") as f:
    profils_fautes = json.load(f)

# üî† Lecture du contenu texte du fichier DOCX
def lire_docx_texte(chemin):
    doc = Document(chemin)
    full_text = []
    for para in doc.paragraphs:
        if para.text.strip():
            full_text.append(para.text.strip())
    return "\n".join(full_text)

# ‚úçÔ∏è G√©n√©ration du prompt acad√©mique √† partir de la partie choisie
def construire_prompt_complet(sujet_complet, partie_cible, genre):
    intro = (
        "Tu incarnes un(e) √©tudiant(e) en Master 2 Finance de March√© ‚Äì sp√©cialit√© Trading. "
        "r√©digeant un devoir surveill√© bas√© sur un sujet fourni, en adoptant un ton personnel et critique, "
        "√† la premi√®re personne du singulier, mais avec la rigueur attendue √† ce niveau."
        "Tu dois d√©montrer une r√©flexion critique, une rigueur acad√©mique, et une bonne ma√Ætrise des concepts financiers."
    )
    ton = (
        "Exprime-toi comme une √©tudiante en fin de Master, avec un style fluide, naturel et structur√©. "
        "Utilise des transitions coh√©rentes, √©vite les r√©p√©titions comme 'En tant qu‚Äô√©tudiante‚Ä¶'. "
        "Sois pr√©cise, nuanc√©e, et propose une r√©flexion argument√©e, comme dans un devoir √©crit authentique."
        if genre == "f" else
        "Exprime-toi comme un √©tudiant en fin de Master, avec un style fluide, naturel et structur√©. "
        "Utilise des transitions coh√©rentes, √©vite les r√©p√©titions comme 'En tant qu‚Äô√©tudiant‚Ä¶'. "
        "Sois pr√©cis, nuanc√©, et propose une r√©flexion argument√©e, comme dans un devoir √©crit authentique."
    )
    consignes = (
        f"La partie {partie_cible} comprend plusieurs t√¢ches (par exemple : veille √©conomique, veille juridique, etc.). "
        "Tu dois imp√©rativement r√©pondre √† **chaque t√¢che s√©par√©ment** avec une **r√©ponse d√©taill√©e, critique et construite**, "
        
        "Structure chaque r√©ponse comme une mini-dissertation avec une **introduction, un d√©veloppement et une conclusion**. "
        "Utilise les donn√©es du sujet (macro√©conomie, inflation, volatilit√©, contexte g√©opolitique, etc.) et exploite-les avec pr√©cision. "
        "Tu dois d√©montrer ta capacit√© √† faire de la **veille strat√©gique**, √† **croiser les donn√©es** et √† **proposer une analyse pertinente**."
    )

    output = (
        f"{intro}\n{ton}\n{consignes}\n\n"
        f"=== Sujet Complet ===\n{sujet_complet}\n\n"
        f"=== Consigne sp√©cifique ===\n"
        f"Tu dois r√©diger uniquement la partie intitul√©e : {partie_cible}. "
        f"Traite chaque t√¢che individuellement, comme si tu r√©digeais un m√©moire acad√©mique."
    )

    return output
# üß† Ajout de fautes personnalis√©es
def introduire_erreurs_subtiles(texte, profil):
    base = profil["base_rate"]
    mots_risque = profil["mots_a_risque"]
    repetition = profil["repetition_faute"]

    if random.random() < base["accent_oublie"]:
        texte = texte.replace("√©", "e", 1).replace("√†", "a", 1)
    if random.random() < base["homophone"]:
        homophones = [("et", "est"), ("a", "√†"), ("ces", "ses"), ("on", "ont"), ("c‚Äôest", "s‚Äôest")]
        h = random.choice(homophones)
        texte = texte.replace(h[0], h[1], 1)
    if random.random() < base["touche_adj"]:
        texte = texte.replace("u", "i", 1)
    if random.random() < base["liaison_oubliee"]:
        texte = texte.replace("n‚Äôest", "ne est", 1)
    if random.random() < base["fautes_d_accord"]:
        texte = texte.replace("les entreprises sont", "les entreprise est", 1)
    if random.random() < repetition:
        mot = random.choice(mots_risque)
        texte = texte.replace(mot, mot.upper(), 1)

    return texte

# üåê Interface utilisateur Streamlit
st.title("üß† G√©n√©rateur de Devoirs Automatis√© - Bloc 1")
st.markdown("Ce g√©n√©rateur traite un sujet complet et g√©n√®re une r√©ponse structur√©e pour une partie choisie.")

nom = st.text_input("Nom de l'√©l√®ve")
prenom = st.text_input("Pr√©nom de l'√©l√®ve")
date_naissance = st.date_input("Date de naissance")
genre = st.radio("Genre", ["m", "f"])

noms_profils = [profil["nom"] for profil in profils_fautes.values()]
profil_nom_selectionne = st.selectbox("Choisis un profil d'√©l√®ve :", noms_profils)
profil_selectionne = next(p for p in profils_fautes.values() if p["nom"] == profil_nom_selectionne)

partie_cible = st.selectbox("Choisis la partie √† traiter :", [
    "Partie 1", "Partie 2", "Partie 3", "Partie 4", "Partie 5"
])

if st.button("üìÑ G√©n√©rer le devoir"):
    try:
        texte_sujet = lire_docx_texte(chemin_sujet)
        prompt = construire_prompt_complet(texte_sujet, partie_cible, genre)
        temperature = random.uniform(0.7, 0.9)

        response = openai.ChatCompletion.create(
            model="gpt-4",
            temperature=temperature,
            messages=[
                {"role": "system", "content": "Tu es professeur et expert en finance de march√©. Tu √©values un devoir d‚Äôun √©tudiant en M2."},
                {"role": "user", "content": prompt}
            ]
        )

        texte_genere = response.choices[0].message.content.strip()
        texte_genere = introduire_erreurs_subtiles(texte_genere, profil_selectionne)

        st.subheader("‚úçÔ∏è Devoir g√©n√©r√©")
        st.write(texte_genere)

        # üíæ G√©n√©ration du fichier Word
        date_realisation = datetime.datetime.today().strftime("%d/%m/%Y")
        repertoire_eleve = os.path.join("C:/Users/ps3ka/openai/Devoirs_Eleves", f"{prenom}_{nom}")
        os.makedirs(repertoire_eleve, exist_ok=True)
        filename = os.path.join(repertoire_eleve, f"Devoir_{partie_cible}_{prenom}_{nom}.docx")

        doc = Document()
        doc.add_heading(f"Devoir - {partie_cible}", level=1)
        doc.add_paragraph(f"üìå Nom : {nom}")
        doc.add_paragraph(f"üìå Pr√©nom : {prenom}")
        doc.add_paragraph(f"üìå Date de naissance : {date_naissance.strftime('%d/%m/%Y')}")
        doc.add_paragraph(f"üìå Date de r√©alisation : {date_realisation}")
        doc.add_heading("R√©ponse :", level=2)
        doc.add_paragraph(texte_genere)
        doc.save(filename)

        with open(filename, "rb") as f:
            st.download_button("‚¨áÔ∏è T√©l√©charger le devoir en .docx", f, file_name=os.path.basename(filename))

    except Exception as e:
        st.error(f"Erreur : {e}")