import streamlit as st
import openai
import random
import datetime
import os
import json
from docx import Document
from dotenv import load_dotenv

# üîê Chargement de la cl√© OpenAI depuis le fichier .env
load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

# Charger les profils d‚Äôerreurs depuis le fichier JSON
with open("profils_fautes_corriges.json", "r", encoding="utf-8") as f:
    profils_fautes = json.load(f)

# üîß G√©n√®re un prompt plus naturel et acad√©mique
def construire_prompt(question, genre):
    intro = (
        "Tu incarnes un(e) √©tudiant(e) en Master 2 Finance de March√© ‚Äì sp√©cialit√© Trading. "
        "Tu r√©diges une r√©ponse √† un devoir surveill√©, en adoptant un ton personnel et critique, "
        "√† la premi√®re personne du singulier, mais avec la rigueur attendue √† ce niveau."
    )

    ton = (
        "Exprime-toi comme une √©tudiante en fin de Master, avec un style fluide, naturel et structur√©. "
        "Utilise des transitions coh√©rentes, √©vite les r√©p√©titions comme 'En tant qu‚Äô√©tudiante‚Ä¶'. "
        "Sois pr√©cise, nuanc√©e, et propose une r√©flexion argument√©e, comme dans un devoir √©crit authentique."
        if genre == "f" else
        "Exprime-toi comme un √©tudiant en fin de Master, avec un style fluide, naturel et structur√©. "
        "Utilise des transitions coh√©rentes, √©vite les r√©p√©titions comme 'En tant qu‚Äô√©tudiant‚Ä¶'. "
        "Sois pr√©cis, nuanc√©, et propose une r√©flexion argument√©e, comme dans un devoir √©crit authentique."
    )

    consignes = (
        "Structure ta r√©ponse avec : une courte introduction contextuelle, un d√©veloppement logique, "
        "et une conclusion ou ouverture. N‚Äôutilise pas de listes √† puces, mais d√©veloppe chaque id√©e dans un paragraphe complet."
    )

    return f"{intro}\n{ton}\n{consignes}\n\nQuestion : {question}"

# üìå Fonction pour introduire des fautes subtiles selon le profil
def introduire_erreurs_subtiles(texte, profil):
    base = profil["base_rate"]
    mots_risque = profil["mots_a_risque"]
    repetition = profil["repetition_faute"]

    if random.random() < base["accent_oublie"]:
        texte = texte.replace("√©", "e", 1).replace("√†", "a", 1)

    if random.random() < base["homophone"]:
        homophones = [("et", "est"), ("a", "√†"), ("ces", "ses"), ("on", "ont"), ("c‚Äôest", "s‚Äôest")]
        h = random.choice(homophones)
        texte = texte.replace(h[0], h[1], 1)

    if random.random() < base["touche_adj"]:
        texte = texte.replace("u", "i", 1)

    if random.random() < base["liaison_oubliee"]:
        texte = texte.replace("n‚Äôest", "ne est", 1)

    if random.random() < base["fautes_d_accord"]:
        texte = texte.replace("les entreprises sont", "les entreprise est", 1)

    if random.random() < repetition:
        mot = random.choice(mots_risque)
        texte = texte.replace(mot, mot.upper(), 1)

    return texte

# üìå Fonction pour g√©n√©rer les r√©ponses
def generer_reponses(questions, genre, profil):
    responses = []
    for question in questions:
        temperature = random.uniform(0.7, 0.9)
        request_timeout=180,
        prompt = construire_prompt(question, genre)
        response = openai.ChatCompletion.create(
            model="gpt-4",
            temperature=temperature,
            messages=[
                {"role": "system", "content": "Tu es professeur et expert en finance de march√©. Tu √©values un devoir r√©dig√© par un(e) √©tudiant(e) en M2."},
                {"role": "user", "content": prompt}
            ]
        )
        texte = response.choices[0].message.content.strip()
        responses.append(introduire_erreurs_subtiles(texte, profil))
    return responses

# üåê Interface utilisateur
st.title("üß† G√©n√©rateur de Devoirs - Bloc 1")
st.markdown("Remplis le formulaire ci-dessous pour g√©n√©rer un devoir complet automatiquement.")

# üìã Formulaire
nom = st.text_input("Nom de l'√©l√®ve")
prenom = st.text_input("Pr√©nom de l'√©l√®ve")
date_naissance = st.date_input("Date de naissance")
genre = st.radio("Genre", ["m", "f"])

noms_profils = [profil["nom"] for profil in profils_fautes.values()]
profil_nom_selectionne = st.selectbox("Choisis un profil d'√©l√®ve :", noms_profils)
profil_selectionne = next(p for p in profils_fautes.values() if p["nom"] == profil_nom_selectionne)


if st.button("üìÑ G√©n√©rer le devoir"):
    date_realisation = datetime.datetime.today().strftime("%d/%m/%Y")
    repertoire_eleve = os.path.join("C:/Users/ps3ka/openai/Devoirs_Eleves", f"{prenom}_{nom}")
    os.makedirs(repertoire_eleve, exist_ok=True)

    devoirs = {
        "Partie 1": [
            "R√©alisez une analyse SWOT pour √©valuer l'impact des tensions commerciales sur le march√© financier entre AATTLE et YIYO.",
            "Identifiez les nouvelles r√©glementations ou lois qui pourraient affecter les investisseurs en raison de ces tensions.",
            "Examinez les effets potentiels sur l'emploi, les in√©galit√©s sociales et autres aspects sociaux dans les deux pays et au niveau international.",
            "Analysez les implications environnementales de ces tensions, telles que les changements dans les cha√Ænes d'approvisionnement qui pourraient affecter les √©missions de carbone.",
            "√ânoncez les outils de collecte et outils statistiques utilis√©s ainsi que la m√©thodologie pour l'analyse des indices boursiers."
        ],
        "Partie 2 ‚Äì √âtude des march√©s financiers et strat√©gies d‚Äôinvestissement": [
            "R√©alisez une √©tude de march√© prospective (√©conomique, juridique, sociale, environnementale) sur les tendances financi√®res actuelles.",
            "Proposez une synth√®se des principaux atouts et risques identifi√©s sur le march√©.",
            "Analysez la volatilit√© r√©cente des indices S&P 500, NASDAQ et CAC 40 √† l‚Äôaide d‚Äôoutils statistiques.",
            "Expliquez en quoi cette volatilit√© influence les d√©cisions d‚Äôinvestissement.",
            "Pr√©sentez les outils statistiques utilis√©s pour cette analyse.",
            "√âvaluez l‚Äôimpact de la hausse des taux d‚Äôint√©r√™t sur les actions, obligations et immobilier.",
            "Analysez l'effet de l‚Äôinflation sur divers secteurs et proposez des strat√©gies de couverture.",
            "√âvaluez l‚Äôimpact de l‚Äôinflation sur les secteurs technologique, √©nerg√©tique et consommation de base et donnez une recommandation pour Apple dans chacun.",
            "Comparez les performances des secteurs : technologie, √©nergie, biens de consommation de base, sant√©, consommation discr√©tionnaire et immobilier.",
            "Proposez des hypoth√®ses expliquant la sous-performance du secteur technologique."
        ],
        "Partie 3 ‚Äì Strat√©gie de collecte et analyse de donn√©es": [
            "D√©finissez une strat√©gie pour collecter des donn√©es sur les prix des actions des entreprises du CAC 40.",
            "Quels outils ou API allez-vous utiliser pour la collecte de ces donn√©es ?",
            "Proposez un algorithme de nettoyage et de pr√©paration des donn√©es collect√©es.",
            "Quels indicateurs financiers allez-vous calculer (moyennes mobiles, RSI, etc.) ?",
            "Proposez un mod√®le statistique ou √©conom√©trique pr√©dictif pour ces donn√©es.",
            "√âvaluez la performance de votre mod√®le avec des indicateurs comme le R2 ajust√©, le test de Student et le test de Fisher.",
            "D√©veloppez une interface utilisateur simple pour utiliser l‚Äôalgorithme pr√©dictif.",
            "Interpr√©tez les r√©sultats obtenus et pr√©parez une pr√©sentation synth√©tique pour votre √©quipe."
        ],
        "Partie 4 ‚Äì Valorisation des instruments financiers": [
            "Expliquez les avantages et inconv√©nients des mod√®les de valorisation suivants : Black-Scholes, mod√®le binomial, Monte-Carlo.",
            "Choisissez la meilleure m√©thode pour valoriser une option d‚Äôachat europ√©enne (European Call) et justifiez votre choix.",
            "Calculez la valeur de l'option d‚Äôachat europ√©enne avec la m√©thode choisie et expliquez toutes les √©tapes.",
            "Pr√©sentez diff√©rents sc√©narios de risque li√©s √† cette option (volatilit√©, liquidit√©, taux d‚Äôint√©r√™t, contrepartie, mod√®le).",
            "Estimez le temps n√©cessaire pour r√©aliser ces calculs avec votre m√©thode.",
            "Interpr√©tez les r√©sultats et expliquez leur implication pour la gestion des risques de la banque."
        ],
        "Partie 5 ‚Äì Conseil en investissement et produits structur√©s": [
            "Analysez le profil d'investissement de Mme Dupont et justifiez pourquoi un produit structur√© est adapt√©.",
            "S√©lectionnez deux sous-jacents (actions, indices, mati√®res premi√®res) adapt√©s √† son profil et aux conditions de march√©.",
            "Concevez un produit structur√© en d√©crivant la brique obligataire et la brique optionnelle, avec leurs caract√©ristiques (dur√©e, protection, rendement).",
            "Pr√©sentez trois sc√©narios de rendement (favorable, neutre, d√©favorable) en chiffrant l‚Äôimpact sur le capital de Mme Dupont.",
            "V√©rifiez la conformit√© du produit structur√© avec les r√©glementations (MiFID II, transparence, protection du capital).",
            "R√©digez une pr√©sentation p√©dagogique du produit structur√© pour Mme Dupont, en expliquant clairement les avantages et les risques."
        ]
    }

    doc = Document()
    doc.add_heading("Devoir Surveill√© Complet - Analyse Financi√®re et Strat√©gique", level=1)
    doc.add_paragraph(f"üìå Nom : {nom}")
    doc.add_paragraph(f"üìå Pr√©nom : {prenom}")
    doc.add_paragraph(f"üìå Date de naissance : {date_naissance.strftime('%d/%m/%Y')}")
    doc.add_paragraph(f"üìå Date de r√©alisation : {date_realisation}")

    for partie, questions in devoirs.items():
        doc.add_heading(partie, level=1)
        reponses = generer_reponses(questions, genre,profil_selectionne)
        for idx, reponse in enumerate(reponses, 1):
            doc.add_heading(f"Question {idx}", level=2)
            doc.add_paragraph(reponse)

    filename = os.path.join(repertoire_eleve, f"Devoir_Surveill√©_Complet_{prenom}_{nom}.docx")
    doc.save(filename)

    st.success(f"‚úÖ Devoir g√©n√©r√© et enregistr√© : {filename}")
    with open(filename, "rb") as file:
        st.download_button("‚¨áÔ∏è T√©l√©charger le devoir", file, file_name=os.path.basename(filename))
